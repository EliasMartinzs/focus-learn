// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                   String          @id @default(uuid())
  name                 String
  email                String          @unique
  image_url            String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  studySections        StudySection[]
  progress             Progress[]
  studyHours           StudyHour[]
  consecutiveStudyDays Int             @default(0)
  StudyCalendar        StudyCalendar[]
  Flashcard            Flashcard?
}

model StudySection {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  subTopics     SubTopic[]
  studyGoals    StudyGoal[]
  studyHours    StudyHour[]
  progress      Progress[]
  studyCalendar StudyCalendar?
  totalHours    Float          @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model SubTopic {
  id                Int                @id @default(autoincrement())
  name              String
  category          String
  difficulty        String
  sectionId         Int
  section           StudySection       @relation(fields: [sectionId], references: [id])
  studyGoals        StudyGoal[]
  studyHours        StudyHour[]
  progress          Progress[]
  studyCalendar     StudyCalendar?
  externalResources ExternalResource[]
  flashcards        Flashcard[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model StudyHour {
  id         Int           @id @default(autoincrement())
  duration   Float // Duration in hours
  notes      String?
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  sectionId  Int?
  section    StudySection? @relation(fields: [sectionId], references: [id])
  subTopicId Int?
  subTopic   SubTopic?     @relation(fields: [subTopicId], references: [id])
  createdAt  DateTime      @default(now())

  @@index([userId])
  @@index([sectionId])
  @@index([userId, sectionId])
}

model StudyGoal {
  id          Int           @id @default(autoincrement())
  targetHours Float         @default(0)
  completed   Boolean       @default(false)
  sectionId   Int?
  section     StudySection? @relation(fields: [sectionId], references: [id])
  subTopicId  Int?
  subTopic    SubTopic?     @relation(fields: [subTopicId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Progress {
  id             Int           @id @default(autoincrement())
  completedHours Float         @default(0)
  percentage     Float         @default(0)
  lastUpdated    DateTime      @updatedAt
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  sectionId      Int?
  section        StudySection? @relation(fields: [sectionId], references: [id])
  subTopicId     Int?
  subTopic       SubTopic?     @relation(fields: [subTopicId], references: [id])

  @@index([userId])
  @@index([sectionId])
}

model StudyCalendar {
  id         Int           @id @default(autoincrement())
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  sectionId  Int?          @unique
  section    StudySection? @relation(fields: [sectionId], references: [id])
  subTopicId Int?          @unique
  subTopic   SubTopic?     @relation(fields: [subTopicId], references: [id])
  startTime  DateTime // Hora de início da sessão
  endTime    DateTime // Hora de término
  completed  Boolean       @default(false)
  notes      String?
  createdAt  DateTime      @default(now())

  @@index([userId])
  @@index([sectionId])
}

model ExternalResource {
  id         Int      @id @default(autoincrement())
  title      String // Título ou descrição breve do recurso
  url        String // Link para o recurso
  type       String // Tipo do recurso (ex.: "Video", "Article", "PDF")
  notes      String? // Notas adicionais sobre o recurso
  subTopicId Int // Relacionamento com o SubTopic
  subTopic   SubTopic @relation(fields: [subTopicId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([subTopicId]) // Facilitar busca por subtopics
}

model Flashcard {
  id           Int       @id @default(autoincrement())
  question     String // Pergunta ou frente do flashcard
  answer       String // Resposta ou verso do flashcard
  diffculty    String
  subTopicId   Int       @unique // Relacionado ao SubTopic
  subTopic     SubTopic  @relation(fields: [subTopicId], references: [id])
  userId       String    @unique // Relacionado ao User (para flashcards personalizados)
  user         User      @relation(fields: [userId], references: [id])
  lastReviewed DateTime? @updatedAt
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([subTopicId]) // Busca por SubTopic
  @@index([userId]) // Busca por User
}
